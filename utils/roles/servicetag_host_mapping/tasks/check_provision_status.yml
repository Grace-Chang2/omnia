#  Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
---

- name: Set oim_os
  ansible.builtin.set_fact:
    oim_os: "{{ ansible_distribution | lower }}"

- name: Initialize variables
  ansible.builtin.set_fact:
    discovery_provision_status: false

- name: Gathering service facts
  ansible.builtin.service_facts:

- name: Check omnia postgres path exist
  ansible.builtin.stat:
    path: "{{ omnia_postgres_path }}"
  register: postres_path_check

- name: Fetch network table entries
  ansible.builtin.command: "{{ xcat_path }}/lsdef -t network"
  changed_when: false
  failed_when: false
  register: fetch_network

- name: Set discovery_provision_status to true for RHEL/Rocky/Fedora
  ansible.builtin.set_fact:
    discovery_provision_status: true
  when:
    - oim_os == oim_os_redhat or oim_os == oim_os_rocky or oim_os == oim_os_fedora
    - xcatd_service in ansible_facts.services
    - postgresql_service_rhel in ansible_facts.services
    - "'running' in ansible_facts.services[xcatd_service].state"
    - "'running' in ansible_facts.services[postgresql_service_rhel].state"
    - postres_path_check.stat.exists
    - '"admin_network" in fetch_network.stdout'

- name: Set discovery_provision_status to true for Ubuntu
  ansible.builtin.set_fact:
    discovery_provision_status: true
  when:
    - oim_os == oim_os_ubuntu
    - xcatd_service in ansible_facts.services
    - postgresql_service_ubuntu in ansible_facts.services
    - "'running' in ansible_facts.services[xcatd_service].state"
    - "'running' in ansible_facts.services[postgresql_service_ubuntu].state"
    - postres_path_check.stat.exists
    - '"admin_network" in fetch_network.stdout'

- name: Fail if xcatd or postgresql service not running
  ansible.builtin.fail:
    msg: "{{ postgres_install_fail_msg }}"
  when: not discovery_provision_status
